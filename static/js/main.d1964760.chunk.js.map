{"version":3,"sources":["CheckLog.js","JaredChecker.js","App.js","serviceWorker.js","index.js"],"names":["CheckLog","classes","this","props","currentChecks","checks","slice","reverse","react_default","a","createElement","Paper_default","className","div","Table_default","TableHead_default","TableRow_default","TableCell_default","padding","numeric","TableBody_default","map","row","key","name","component","scope","score","tier","phoneticBonus","Done_default","Close_default","Component","withStyles","theme","justifyContent","alignItems","display","flexDirection","textAlign","minWidth","maxWidth","marginTop","overflowX","heading","fontSize","typography","pxToRem","fontWeight","fontWeightRegular","JaredChecker","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","checkSpelling","l","Levenshtein","state","compareName","toLowerCase","attemptedName","caverphone","distance","check","toUpperCase","getGrade","setState","scorePosted","phoneticMatch","checkHistory","concat","updateAttemptedName","currentAttempt","target","value","arguments","length","undefined","tierStep","Math","round","abs","dangerouslySetInnerHTML","__html","toString","sup","repeat","results","Typography_default","variant","TextField_default","id","label","margin","onChange","Button_default","color","onClick","Chip_default","chip","src_CheckLog","width","App","gutterBottom","src_JaredChecker","href","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d1964760.chunk.js","sourcesContent":["import React, { Component } from \"react\"\nimport TextField from \"@material-ui/core/TextField\"\nimport Button from \"@material-ui/core/Button\"\nimport { withStyles } from \"@material-ui/core/styles\"\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\n\nimport BonusIcon from '@material-ui/icons/Done';\nimport NoBonusIcon from '@material-ui/icons/Close';\n\n\nconst styles = theme => ({\n  div: {\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    textAlign: \"center\",\n    minWidth: \"50%\",\n    maxWidth: \"100%\",\n    marginTop: \"5em\",\n    overflowX: 'auto'\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    fontWeight: theme.typography.fontWeightRegular,\n  }\n})\n\nclass CheckLog extends Component {\n  render() {\n    const { classes } = this.props\n    // New Instance of Array as reverse() is destructive and would cause the table to constantly flip every state update\n    let currentChecks = this.props.checks.slice(0)\n    currentChecks.reverse()\n    return (\n      <Paper className={classes.div}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell padding=\"dense\">Attempt Name</TableCell>\n              <TableCell numeric padding=\"dense\">Score</TableCell>\n              <TableCell padding=\"dense\">Tier</TableCell>\n              <TableCell padding=\"dense\">Phonetic Match?</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {currentChecks.map(row => {\n              return (\n                <TableRow key={row.name}>\n                  <TableCell component=\"th\" scope=\"row\" padding=\"dense\">\n                    {row.name}\n                  </TableCell>\n                  <TableCell numeric padding=\"dense\">{row.score}</TableCell>\n                  <TableCell padding=\"dense\">{row.tier}</TableCell>\n                  <TableCell padding=\"dense\">{row.phoneticBonus ? <BonusIcon /> : <NoBonusIcon />}</TableCell>\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </Table>\n      </Paper>\n    )\n  }\n}\n\nexport default withStyles(styles)(CheckLog);","import React, { Component } from \"react\"\nimport TextField from \"@material-ui/core/TextField\"\nimport Button from \"@material-ui/core/Button\"\nimport { withStyles } from \"@material-ui/core/styles\"\nimport Typography from '@material-ui/core/Typography'\nimport Levenshtein from \"levenshtein\"\nimport caverphone from \"caverphone-phonetics\"\nimport CheckLog from \"./CheckLog\";\nimport Chip from '@material-ui/core/Chip';\n\nconst styles = theme => ({\n  div: {\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    textAlign: \"center\",\n    width: \"100vw\"\n  }\n})\n\nclass JaredChecker extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      compareName: \"Jared\",\n      attemptedName: \"\",\n      score: 0,\n      scorePosted: false,\n      phoneticMatch: false,\n      checkHistory: []\n    }\n  }\n\n  checkSpelling = () => {\n    let l = new Levenshtein(this.state.compareName.toLowerCase(), this.state.attemptedName.toLowerCase())\n    let phoneticBonus = caverphone(this.state.attemptedName.toLowerCase()) === caverphone(this.state.compareName.toLowerCase())\n    let score = (80 - (l.distance * 20)) + (phoneticBonus ? 20 : 0)\n\n    let check = {\n      name: this.state.attemptedName.toUpperCase(),\n      score: score,\n      tier: this.getGrade(score),\n      phoneticBonus: phoneticBonus\n    }\n\n    this.setState({\n      score: score,\n      scorePosted: true,\n      phoneticMatch: phoneticBonus,\n      checkHistory: this.state.checkHistory.concat([check])\n    })\n  }\n\n  updateAttemptedName = (currentAttempt) => {\n    this.setState({\n      attemptedName: currentAttempt.target.value\n    })\n  }\n\n  getGrade = (score = this.state.score) => {\n    let tierStep = Math.round(score / 20)\n    switch(tierStep) {\n      case 5:\n        return \"S\"\n      case 4:\n        return \"A\"\n      case 3:\n        return \"B\"\n      case 2:\n        return \"C\"\n      case 1:\n        return \"D\"\n      case 0:\n        return \"F\"\n      default:\n        if (Math.abs(tierStep) > 8) {\n          return  (<span dangerouslySetInnerHTML={{__html: \"F.FFx10\" + Math.abs(tierStep).toString().sup() }} />)\n        } else {\n          return \"F\".repeat(Math.abs(tierStep))\n        }\n    }\n  }\n\n  render() {\n    const { classes } = this.props\n    let results = null\n    if (this.state.scorePosted) {\n      results = (\n        <div>\n          <Typography component=\"h4\" variant=\"h4\">\n            This would be rated a {this.state.score} out of 100.\n          </Typography>\n          <Typography component=\"h4\" variant=\"h6\">\n            aka a {this.getGrade()} tier spelling.\n          </Typography>\n        </div>\n      )\n    }\n    return (\n      <div className={classes.div}>\n        <TextField\n          id=\"standard-dense\"\n          label=\"Attempted Spelling\"\n          margin=\"dense\"\n          onChange={this.updateAttemptedName}\n        />\n        <br />\n        <Button variant=\"contained\" color=\"primary\" onClick={this.checkSpelling}>\n          Grade Spelling\n        </Button>\n        { results }\n        { this.state.phoneticMatch ? <Chip label=\"Phonetic Match!\" className={classes.chip} /> : null }\n        <CheckLog checks={this.state.checkHistory} />\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(JaredChecker);","import React, { Component } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport JaredChecker from './JaredChecker';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Typography component=\"h4\" variant=\"h3\" gutterBottom>\n          How well did they spell \"Jared\"?\n        </Typography>\n        <JaredChecker />\n        <Typography component=\"a\" variant=\"overline\" href=\"http://chrismiller.xyz\" gutterBottom>\n          chrismiller.xyz\n        </Typography>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'typeface-roboto';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}